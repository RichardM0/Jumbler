import javax.swing.*;
import java.awt.*;
import java.awt.event.*;
import javax.imageio.*;
import java.io.File;
import java.awt.image.BufferedImage;
import javax.swing.JSlider;
import javax.swing.event.*;



public class JumbleMain extends JPanel implements ActionListener, ItemListener
{
    public static JFrame frame;
    private static JPanel bottomPanel, imgPanel, buttonPanel;
    private static JButton shuffleImg, reconstructImg, saveImg, setOriginal, setJumbled;
    private static JumbledLoader L;
    private static JMenuBar menuBar;
    private static JMenu gridMenu;
    private static JRadioButtonMenuItem two, three;
    private static ButtonGroup gridGroup;
    
    public JumbleMain() {
        frame = new JFrame();
        bottomPanel = new JPanel();
        buttonPanel = new JPanel();
        imgPanel = new JPanel(new FlowLayout(FlowLayout.CENTER)); 

        shuffleImg = new JButton("Shuffle");
        reconstructImg = new JButton("Reconstruct");
        saveImg = new JButton("Save");
        setOriginal = new JButton("Set Original");
        setJumbled = new JButton("Change Jumbled");

        shuffleImg.addActionListener(this);
        reconstructImg.addActionListener(this);
        saveImg.addActionListener(this);
        setOriginal.addActionListener(this);
        setJumbled.addActionListener(this);

        buttonPanel.add(shuffleImg);
        buttonPanel.add(reconstructImg);
        buttonPanel.add(saveImg);
        buttonPanel.add(setOriginal);
        buttonPanel.add(setJumbled);
        
        menuBar = new JMenuBar();
        gridMenu = new JMenu("Shuffle Size");
        gridGroup = new ButtonGroup();
        gridMenu.addSeparator();
        
        two = new JRadioButtonMenuItem("2x2");
        three = new JRadioButtonMenuItem("3x3");
  

        two.addItemListener(this);
        three.addItemListener(this);

        gridGroup.add(two);
        gridGroup.add(three);
       
        gridMenu.add(two);
        gridMenu.add(three);

        menuBar.add(gridMenu);
        
        L = new JumbledLoader();
        frame.add(L, BorderLayout.CENTER);
        bottomPanel.add(buttonPanel, BorderLayout.CENTER);
        
        frame.add(bottomPanel, BorderLayout.SOUTH);
        frame.setJMenuBar(menuBar);
        frame.setSize(900, 900);
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.setVisible(true);
    }
    public static void main(String[] args){      
        new JumbleMain();
    }
    public void saveImage(File image) {
        BufferedImage img = L.getImg();
         try {
            ImageIO.write(img, "png", image);
        } catch (Exception e) {
            System.out.println("Image could not be read");
        }
    }
    public void itemStateChanged(ItemEvent e){
        if (e.getStateChange() == ItemEvent.SELECTED) {
            if (e.getSource() == two) {
                L.setSquare(2);
            } else if (e.getSource() == three) {
                L.setSquare(3);
            }
        }
    }
    public void actionPerformed(ActionEvent e){
        if(e.getSource() == shuffleImg){
            L.jumble();
        }
        else if(e.getSource() == reconstructImg){
            L.reconstruct();
        }
        else if(e.getSource() == saveImg){
            JFileChooser chooser = new JFileChooser("./images");
            if(chooser.showSaveDialog(frame) == JFileChooser.APPROVE_OPTION) {
               saveImage(chooser.getSelectedFile());
            }
        }
        else if(e.getSource() == setOriginal){
            JFileChooser select = new JFileChooser("images/");
            int status = select.showOpenDialog(frame);
            if (status == JFileChooser.APPROVE_OPTION) {
                L.setOriginalImg(select.getSelectedFile());
            }
        }
        else if(e.getSource() == setJumbled){
            JFileChooser select = new JFileChooser("images/");
            int status = select.showOpenDialog(frame);
            if (status == JFileChooser.APPROVE_OPTION) {
                L.setImg(select.getSelectedFile());
            }
        }
    }
}
