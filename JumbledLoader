import java.io.*;
import java.net.*;
import java.awt.*;
import java.awt.event.*;
import java.awt.image.*;
import javax.imageio.*;
import java.util.ArrayList;
import java.util.Collections;
import java.lang.Thread;
import javax.swing.*;
import java.util.Random;


public class JumbledLoader extends JPanel{
    private BufferedImage img, originalImg;
    private int width, height, curWidth, curHeight, cw, ch;
    private ArrayList<Integer> cells = new ArrayList<Integer>();
    private ArrayList<Integer> originalCells = new ArrayList<Integer>();
    private int square = 3;
    private Timer timer;

    public JumbledLoader(){
        loadImage(new File("images/smallpandaJ.jpg"));
        for(int i = 0; i<square*square; i++){
            cells.add(i);
            originalCells.add(i);
        }
    }
    public JumbledLoader(File f){
        loadImage(f);
    }
    public void loadImage(File f) {
        try {
            img = ImageIO.read(f);
            originalImg = ImageIO.read(new File("images/smallpanda.jpg"));
            width = img.getWidth();
            curWidth = width;
            height = img.getHeight();
            curHeight = height;
            
        } catch (IOException e) {
            System.out.println("Image could not be read");
        }
    }
    public void updateCells(){
        int square = (int) Math.sqrt(cells.size());
        cw = img.getWidth()/square;
        ch = img.getHeight()/square;
    }
    public void jumble(){  
        cw = img.getWidth()/square;
        ch = img.getHeight()/square;
        BufferedImage jumbledImg = new BufferedImage(cw*square, ch*square, BufferedImage.TYPE_INT_ARGB);
        
        cells.clear();
        for(int i = 0; i<square*square; i++){
            cells.add(i);
        }
        Graphics2D g2d = jumbledImg.createGraphics();
        Collections.shuffle(cells);
        for(int i = 0; i<cells.size(); i++){
            int cellIndex = cells.get(i);
            g2d.drawImage(img.getSubimage(cellIndex%square*cw, (int)cellIndex/square*ch, cw, ch),cw*(i%square), ch*((int)i/square), null);
        }
        g2d.dispose();
        img = jumbledImg;
        repaint();
    }
    public boolean bufferedImagesEqual(BufferedImage img1, BufferedImage img2)
    {
        int width = Math.min(img1.getWidth(), img2.getWidth());
        int height = Math.min(img1.getHeight(), img2.getHeight());
        for (int x = 0; x < width; x++) {
            for (int y = 0; y < height; y++) {
                if (img1.getRGB(x, y) != img2.getRGB(x, y))
                    return false;
            }
        }
        return true;
    }
    /*public void reconstruct()
    {
        Thread t = new Thread(() ->{
            cw = img.getWidth()/square;
            ch = img.getHeight()/square;
            int length = square*square;
            int numTries = 0;
            Graphics2D g2d = img.createGraphics();
            System.out.println(cells);
            for(int i=0; i<length; i++){
                int curValue = cells.get(i);
                int swapIndex = cells.indexOf(i);
                
                if(curValue == i){
                    continue;
                }
                cells.set(i, i);
                cells.set(swapIndex, curValue);
                for(int j = 0; j<cells.size(); j++){
                    try{
                        Thread.sleep(100);
                    }
                    catch(Exception e){
                        System.out.println("Failed sleep");
                    }
                    int cellIndex = cells.get(j);
                    g2d.drawImage(originalImg.getSubimage(j%square*cw, (int)j/square*ch, cw, ch),cw*(j%square), ch*((int)j/square), null);
                    repaint(0,0, this.getWidth(), this.getHeight());
                }
                System.out.println("loop" + i + ": " + cells);
                numTries++;
            }
            System.out.println("It took: " + numTries + " tries.");

            g2d.dispose();

        });
        t.start();
    }*/
    public void reconstruct(){
        Thread t = new Thread(() ->{
            cw = img.getWidth()/square;
            ch = img.getHeight()/square;
            int numTries = 0;
            int length = square*square;
            Graphics2D g2d = img.createGraphics();
            for(int i=0; i<length; i++){
                BufferedImage subImg = new BufferedImage(cw,ch,BufferedImage.TYPE_INT_ARGB);
                Graphics2D g = subImg.createGraphics();
                g.drawImage(img.getSubimage(i%square*cw, (int)i/square*ch, cw, ch),0,0,null);
                g.dispose();
                BufferedImage subOriginalImg = originalImg.getSubimage(i%square*cw, (int)i/square*ch, cw, ch);
                
                if(bufferedImagesEqual(subImg, subOriginalImg)){
                    continue;
                }
                else{
                    for(int j = 0; j<length; j++){
                        BufferedImage loopOriginalImg = img.getSubimage(j%square*cw, (int)j/square*ch, cw, ch);
                        if(bufferedImagesEqual(subOriginalImg, loopOriginalImg)){
                             g2d.drawImage(img.getSubimage(j%square*cw, (int)j/square*ch, cw, ch), i%square*cw, (int)i/square*ch, null); 
                             g2d.drawImage(subImg, j%square*cw, (int)j/square*ch, null);
                             repaint();
                        }
                        try{
                             Thread.sleep(50);
                        }
                        catch(Exception e){
                             ;
                        }
                    }
                }
                numTries++;
            }
            System.out.println("It took: " + numTries);
            });
        t.start();
    }
    public void updateImg(){
        repaint();
    }
    public BufferedImage getImg(){
        return img;
    }
    public void paint(Graphics g) {    
        super.paintComponent(g);
        Graphics2D g2d = (Graphics2D) g;

        int newWidth = (int) curWidth;
        int newHeight = (int) curHeight;
        g2d.drawImage(img, 300-curWidth/2, 250-curHeight/2, newWidth, newHeight, null);
    }
}
