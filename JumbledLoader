import java.io.*;
import java.net.*;
import java.awt.*;
import java.awt.event.*;
import java.awt.image.*;
import javax.imageio.*;
import java.util.ArrayList;
import java.util.Collections;
import java.lang.Thread;
import javax.swing.*;
import java.util.Random;


public class JumbledLoader extends JPanel{
    private BufferedImage img, originalImg;
    private int curWidth, curHeight, cw, ch;
    private ArrayList<Integer> cells = new ArrayList<Integer>();
    private int square = 3;

    public JumbledLoader(){
        loadImage(new File("images/smallpanda2.jpg"));
        for(int i = 0; i<square*square; i++){
            cells.add(i);
        }
    }
    public JumbledLoader(File f){
        loadImage(f);
    }
    public void loadImage(File f) {
        try {
            img = ImageIO.read(f);
            originalImg = ImageIO.read(new File("images/smallpanda.jpg"));
            curWidth = img.getWidth();
            curHeight = img.getHeight();
            if(curWidth>300 || curHeight>300){
                resize(300/Double.valueOf(curWidth), 300/Double.valueOf(curHeight));
            }
        } catch (IOException e) {
            System.out.println("Image could not be read");
        }
    }
    public void resize(double ws, double hs){
        double scale = Math.min(ws, hs);
        curWidth = (int)(Double.valueOf(curWidth)*scale);
        curHeight = (int)(Double.valueOf(curHeight)*scale);
        
        BufferedImage resizedImage = new BufferedImage(curWidth, curHeight, BufferedImage.TYPE_INT_ARGB);
        Graphics2D g = resizedImage.createGraphics();
        g.drawImage(img, 0, 0 , curWidth, curHeight, null);
        g.dispose();
        img = resizedImage;
        repaint();
    }
    public void updateCells(){
        curWidth = img.getWidth();
        curHeight = img.getHeight();
        if(curWidth>300 || curHeight>300){
                resize(300/Double.valueOf(curWidth), 300/Double.valueOf(curHeight));
        }
        cw = curWidth/square;
        ch = curHeight/square;
    }
    public void jumble(){  
        cw = curWidth/square;
        ch = curHeight/square;
        BufferedImage jumbledImg = new BufferedImage(cw*square, ch*square, BufferedImage.TYPE_INT_ARGB);
        
        cells.clear();
        for(int i = 0; i<square*square; i++){
            cells.add(i);
        }
        Graphics2D g2d = jumbledImg.createGraphics();
        Collections.shuffle(cells);
        for(int i = 0; i<cells.size(); i++){
            int cellIndex = cells.get(i);
            g2d.drawImage(img.getSubimage(cellIndex%square*cw, (int)cellIndex/square*ch, cw, ch),cw*(i%square), ch*((int)i/square), null);
        }
        g2d.dispose();
        img = jumbledImg;
        repaint();
    }
    public boolean bufferedImagesEqual(BufferedImage img1, BufferedImage img2)
    {
        int width = Math.min(img1.getWidth(), img2.getWidth());
        int height = Math.min(img1.getHeight(), img2.getHeight());
        for (int x = 0; x < width; x++) {
            for (int y = 0; y < height; y++) {
                if (img1.getRGB(x, y) != img2.getRGB(x, y))
                    return false;
            }
        }
        return true;
    }
    public void reconstruct(){
        Thread t = new Thread(() ->{
            cw = curWidth/square;
            ch = curHeight/square;
            int numTries = 0;
            int length = square*square;
            Graphics2D g2d = img.createGraphics();
            for(int i=0; i<length; i++){
                BufferedImage subImg = new BufferedImage(cw,ch,BufferedImage.TYPE_INT_ARGB);
                Graphics2D g = subImg.createGraphics();
                g.drawImage(img.getSubimage(i%square*cw, (int)i/square*ch, cw, ch),0,0,null);
                g.dispose();
                BufferedImage subOriginalImg = originalImg.getSubimage(i%square*cw, (int)i/square*ch, cw, ch);
                
                if(bufferedImagesEqual(subImg, subOriginalImg)){
                    continue;
                }
                else{
                    for(int j = 0; j<length; j++){
                        BufferedImage loopOriginalImg = img.getSubimage(j%square*cw, (int)j/square*ch, cw, ch);
                        if(bufferedImagesEqual(subOriginalImg, loopOriginalImg)){
                             g2d.drawImage(img.getSubimage(j%square*cw, (int)j/square*ch, cw, ch), i%square*cw, (int)i/square*ch, null); 
                             g2d.drawImage(subImg, j%square*cw, (int)j/square*ch, null);
                             repaint();
                        }
                        try{
                             Thread.sleep(50);
                        }
                        catch(Exception e){
                             ;
                        }
                    }
                }
                numTries++;
            }
            System.out.println("It took: " + numTries);
            });
        t.start();
    }
    public void setOriginalImg(File f){
        try{
            originalImg = ImageIO.read(f);
            updateCells();
        }catch(Exception e){
            System.out.println("Failed to update Original Image");
        }
        repaint();
    }
    public void setImg(File f){
        try{
            img = ImageIO.read(f);
            updateCells();
        }catch(Exception e){
            System.out.println("Failed to update Current Image");
        }
        repaint();
    }
    public BufferedImage getImg(){
        return img;
    }
    public void paint(Graphics g) {    
        super.paintComponent(g);
        Graphics2D g2d = (Graphics2D) g;
        int imgY = 250-curHeight/2;
        g2d.drawImage(originalImg, 50, imgY, curWidth, curHeight, null);
        g2d.drawImage(img, curWidth + 100, imgY, curWidth, curHeight, null);
    }
}
